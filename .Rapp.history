source("globalmaptiles.R")#
## Check if packages exist and download them #
if(!(require(maptools))){#
  install.packages("maptools");#
  require(maptools);#
}#
if(!(require(sp))){#
  install.packages("sp");#
  require(sp);#
}#
if(!(require(rgeos))){#
  install.packages("rgeos");#
  require(rgeos);#
}#
if(!(require(rgdal))){#
  install.packages("rgdal");#
  require(rgdal);#
}#
## Load package libraries #
library("maptools")#
library("sp")#
library("rgeos")#
library("rgdal")#
library("parallel")
source("globalmaptiles.R")
zoom= 14;
shape1= readShapeSpatial("vermont/tabblock2010_50_pophu.shp")
shape= shape1[1:200,];
coords= lapply(shape, partcoordstate);
source("globalmaptiles.R")
coords= lapply(1:10, partcoordstate);
source("globalmaptiles.R")
coords= lapply(1:10, partcoordstate);
head(coords)
seq(1:10,5)
seq(1,5)
seq(1,5,2)
source("globalmaptiles.R")
coords= lapply(1:10, partcoordstate)
source("globalmaptiles.R")
coords= lapply(1:10, partcoordstate)
source("globalmaptiles.R")
coords= lapply(1:10, partcoordstate)
head(coords)
coords= lapply(1:10, partcoordstate,simplify=TRUE)
coords= lapply(1:10, partcoordstate,simplify=True)
coords= lapply(1:10, simplify,=true,partcoordstate)
coords= lapply(1:10, simplify=true,partcoordstate)
coords= lapply(1:10, simplify="array",partcoordstate)
simplify2array(coords)
head(coords)
summary(coords)
coords= lapply(1:10, SIMPLIFY=true, partcoordstate)
mapply(c, coords, SIMPLIFY=false)
mapply(c, coords, SIMPLIFY=FALSE)
coords= lapply(1:10, SIMPLIFY=TRUE, partcoordstate)
lapply(c, coords)
lapply(coords, c)
shape= shape1[1:10,];
coords= lapply(shape, totalcoordstate);
coords= lapply(as.data.frame(shape), totalcoordstate);
source("globalmaptiles.R")
coords= lapply(as.data.frame(shape), totalcoordstate);
test <- as.data.frame(shape)
head(test)
head(shape1)
library("maptools")#
library("sp")#
library("rgeos")#
library("rgdal")#
library("parallel")#
library("Cairo")#
#
## 2. Read shape, output data with coordinates and quadkey reference #
# Read zoom level (zoom levels should be from 4 to 13)#
zoom= 14;#
# Convert coordinates to quadkey#
shape1= readShapeSpatial("vermont/tabblock2010_50_pophu.shp")#
shape= shape1[1:100,];#
#1. Obtain Coordinates #
coords= totalcoordstate(shape); #
#2. Convert to Tiles#
meters= coordstoMeters(coords, origin.shift); #
pixels= meterstoPixels(meters, zoom, origin.shift);#
tiles= pixelstoTiles(pixels, tile.size); #
#3. Convert to Google Quadkey#
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)#
#4. Combine meter coordinates with quadkey values#
quad.coord= data.frame(quadkey, meters$mx, meters$my)#
#5 draw tiles#
zoomlevels = c(2:10)
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(quadlevel)#
  	lapply(quadlevel,draw.tile)#
}
source("globalmaptiles.R")
coords= totalcoordstate(shape); #
#2. Convert to Tiles#
meters= coordstoMeters(coords, origin.shift); #
pixels= meterstoPixels(meters, zoom, origin.shift);#
tiles= pixelstoTiles(pixels, tile.size); #
#3. Convert to Google Quadkey#
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)#
#4. Combine meter coordinates with quadkey values#
quad.coord= data.frame(quadkey, meters$mx, meters$my)#
#5 draw tiles#
zoomlevels = c(2:4)
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(quadlevel)#
  	lapply(quadlevel,draw.tile)#
}
zoomlevels = c(2:7)#
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(quadlevel)#
  	lapply(quadlevel,draw.tile)#
}
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(quadlevel)#
  	mclapply(quadlevel,draw.tile)#
}
zoomlevels = c(2:14)#
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(quadlevel)#
  	mclapply(quadlevel,draw.tile)#
}
shape = shape1
coords= totalcoordstate(shape); #
#2. Convert to Tiles#
meters= coordstoMeters(coords, origin.shift); #
pixels= meterstoPixels(meters, zoom, origin.shift);#
tiles= pixelstoTiles(pixels, tile.size); #
#3. Convert to Google Quadkey#
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)#
#4. Combine meter coordinates with quadkey values#
quad.coord= data.frame(quadkey, meters$mx, meters$my)#
#5 draw tiles#
zoomlevels = c(2:14)#
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(quadlevel)#
  	mclapply(quadlevel,draw.tile)#
}
library("maptools")#
library("sp")#
library("rgeos")#
library("rgdal")#
library("parallel")#
library("Cairo")
?require
if(!(require(rgdal))){#
  install.packages("rgdal");#
  require(rgdal);#
}
require(ggplot)
x = require(ggplot)
x
source("globalmaptiles.R")
zoom = 14;
shape1= readShapeSpatial("vermont/tabblock2010_50_pophu.shp")
shape= shape1[1:100,];
coords= totalcoordstate(shape);
meters= coordstoMeters(coords, origin.shift);
pixels= meterstoPixels(meters, zoom, origin.shift);
tiles= pixelstoTiles(pixels, tile.size);
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)
quad.coord= data.frame(quadkey, meters$mx, meters$my)
zoomlevels = c(2:5)
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
draw.tile =function(quadkey){#
  A = 1000	#
  width = 512#
  zoomlevel=nchar(quadkey)#
  google_tile = quadkeytoTiles(quadkey)#
  tms_tile = googleTiles(google_tile,zoomlevel)#
  bounds = tilebounds(tms_tile[1],tms_tile[2],zoomlevel,origin.shift)#
#
  tile_ll = bounds[1] / A#
  tile_bb = bounds[2] / A#
  tile_rr = bounds[3] / A#
  tile_tt = bounds[4] / A#
#
  xscale = width/(tile_rr - tile_ll)#
  yscale = width/(tile_tt - tile_bb)#
  scale = min(c(xscale,yscale))#
#
  #quad.coord$quadshort = substring(quad.coord$quadkey,1,zoomlevel)#
  coords = quad.coord[quad.coord$quadzoom == quadkey,]#
#
  coords$mx = (coords$meters.mx/A - tile_ll) * scale#
  coords$my = (coords$meters.my/A - tile_tt) * -scale#
  dir.create(paste(zoomlevel,"/",sep=""),showWarnings=FALSE)#
  dir.create(paste(zoomlevel,"/",tms_tile[1],"/",sep=""),showWarnings=FALSE)#
  CairoPNG(file = paste(zoomlevel,"/",tms_tile[1],"/",tms_tile[2],".png",sep=""), width=512, height=512, bg = "transparent")#
  #plot to the corners#
  par(mar=c(0,0,0,0))#
  plot(coords$mx,coords$my,pch=20,cex=1,xlim=c(1,512),ylim=c(512,1),xaxs="i",yaxs="i",bty="n")#
  dev.off()#
}
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
draw.tile =function(quadkey){#
  A = 1000	#
  width = 512#
  zoomlevel=nchar(quadkey)#
  google_tile = quadkeytoTiles(quadkey)#
  tms_tile = googleTiles(google_tile,zoomlevel)#
  bounds = tilebounds(tms_tile[1],tms_tile[2],zoomlevel,origin.shift)#
#
  tile_ll = bounds[1] / A#
  tile_bb = bounds[2] / A#
  tile_rr = bounds[3] / A#
  tile_tt = bounds[4] / A#
#
  xscale = width/(tile_rr - tile_ll)#
  yscale = width/(tile_tt - tile_bb)#
  scale = min(c(xscale,yscale))#
#
  #quad.coord$quadshort = substring(quad.coord$quadkey,1,zoomlevel)#
  coords = quad.coord[quad.coord$quadzoom == quadkey,]#
#
  coords$mx = (coords$meters.mx/A - tile_ll) * scale#
  coords$my = (coords$meters.my/A - tile_tt) * -scale#
  dir.create(paste(zoomlevel,"/",sep=""),showWarnings=FALSE)#
  dir.create(paste(zoomlevel,"/",tms_tile[1],"/",sep=""),showWarnings=FALSE)#
  CairoPNG(file = paste(zoomlevel,"/",tms_tile[1],"/",tms_tile[2],".png",sep=""), width=512, height=512, bg = "transparent")#
  #plot to the corners#
  par(mar=c(0,0,0,0))#
  plot(coords$mx,coords$my,pch=20,cex=1,xlim=c(1,512),ylim=c(512,1),axes=FALSE,xaxs="i",yaxs="i",bty="n")#
  dev.off()#
}
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
dot_size = function(zoom){#
  switch(zoom,4=0.01,9,=0.02,0.0)#
}
dot_size = function(zoom){#
  switch(zoom,"4"=0.01,9,=0.02,0.0)#
}
dot_size = function(zoom){#
  switch(zoom,"4"=0.01,"9",=0.02,0.0)#
}
dot_size = function(zoom){#
  switch(zoom,"4"=0.01,"9",=0.02,0)#
}
dot_size = function(zoom){#
  switch(zoom,4=0.01)#
}
centre <- function(x, type) {#
  switch(type,#
         mean = mean(x),#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre <- function(type) {#
	x= 4#
  switch(type,#
         mean = mean(x),#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre(mean)
centre("mean")
centre <- function(type) {#
	x= 4#
  switch(type,#
         mean = 0.01,#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre("mean")
centre <- function(type) {#
	x= 4#
  switch(type,#
         7 = 0.01,#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre <- function(type) {#
	x= 4#
  switch(as.charachter(type),#
         "7" = 0.01,#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre(7)
centre <- function(type) {#
	x= 4#
  switch(as.character(type)),#
         "7" = 0.01,#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre <- function(type) {#
	x= 4#
  switch(as.character(type),#
         "7" = 0.01,#
         median = median(x),#
         trimmed = mean(x, trim = .1))#
}
centre(7)
plot(1:10)
plot(1:10,col="green")
plot(1:10,col=addTrans("green",100))
plot(1:10,rgb(255,255,255,100))
plot(1:10,col=rgb(255,255,255,100))
plot(1:10,col=rgb(1,1,1,100))
plot(1:10,col=rgb(1,1,1,100/255))
plot(1:10,col=rgb(1,1,1,200/255))
plot(1:10,col=rgb(0,0,0,200/255))
plot(1:10,col=rgb(0,0,0,100/255))
draw.tile =function(quadkey){#
  A = 1000	#
  width = 512#
  zoomlevel=nchar(quadkey)#
  google_tile = quadkeytoTiles(quadkey)#
  tms_tile = googleTiles(google_tile,zoomlevel)#
  bounds = tilebounds(tms_tile[1],tms_tile[2],zoomlevel,origin.shift)#
#
  tile_ll = bounds[1] / A#
  tile_bb = bounds[2] / A#
  tile_rr = bounds[3] / A#
  tile_tt = bounds[4] / A#
#
  xscale = width/(tile_rr - tile_ll)#
  yscale = width/(tile_tt - tile_bb)#
  scale = min(c(xscale,yscale))#
#
  #quad.coord$quadshort = substring(quad.coord$quadkey,1,zoomlevel)#
  coords = quad.coord[quad.coord$quadzoom == quadkey,]#
#
  coords$mx = (coords$meters.mx/A - tile_ll) * scale#
  coords$my = (coords$meters.my/A - tile_tt) * -scale#
  dir.create(paste(zoomlevel,"/",sep=""),showWarnings=FALSE)#
  dir.create(paste(zoomlevel,"/",tms_tile[1],"/",sep=""),showWarnings=FALSE)#
  CairoPNG(file = paste(zoomlevel,"/",tms_tile[1],"/",tms_tile[2],".png",sep=""), width=512, height=512, bg = "transparent")#
  #plot to the corners#
  par(mar=c(0,0,0,0))#
  plot(coords$mx,coords$my,pch=20,cex=1,xlim=c(1,512),ylim=c(512,1),cex=dot_size(zommlevel),col=rgb(0,0,0,dot_opac(zoomlevel)/255) axes=FALSE,xaxs="i",yaxs="i",bty="n")#
  dev.off()#
}#
#
dot_size <- function(zoom) {#
  switch(as.character(type),#
         "4"=0.1,"5"=0.1,"6"=0.1,"7" = 0.1,"8"=0.1,"9"=0.2,"10"=0.2,"11"=0.2,"12"=0.2,"13"=0.2,"14"=0.2)#
}#
#
dot_opac <- function(zoom) {#
  switch(as.character(type),#
         "4"=153,"5"=153,"6"=179,"7" = 179,"8"=204,"9"=204,"10"=230,"11"=230,"12"=255,"13"=255,"14"=255)#
}
draw.tile =function(quadkey){#
  A = 1000	#
  width = 512#
  zoomlevel=nchar(quadkey)#
  google_tile = quadkeytoTiles(quadkey)#
  tms_tile = googleTiles(google_tile,zoomlevel)#
  bounds = tilebounds(tms_tile[1],tms_tile[2],zoomlevel,origin.shift)#
#
  tile_ll = bounds[1] / A#
  tile_bb = bounds[2] / A#
  tile_rr = bounds[3] / A#
  tile_tt = bounds[4] / A#
#
  xscale = width/(tile_rr - tile_ll)#
  yscale = width/(tile_tt - tile_bb)#
  scale = min(c(xscale,yscale))#
#
  #quad.coord$quadshort = substring(quad.coord$quadkey,1,zoomlevel)#
  coords = quad.coord[quad.coord$quadzoom == quadkey,]#
#
  coords$mx = (coords$meters.mx/A - tile_ll) * scale#
  coords$my = (coords$meters.my/A - tile_tt) * -scale#
  dir.create(paste(zoomlevel,"/",sep=""),showWarnings=FALSE)#
  dir.create(paste(zoomlevel,"/",tms_tile[1],"/",sep=""),showWarnings=FALSE)#
  CairoPNG(file = paste(zoomlevel,"/",tms_tile[1],"/",tms_tile[2],".png",sep=""), width=512, height=512, bg = "transparent")#
  #plot to the corners#
  par(mar=c(0,0,0,0))#
  plot(coords$mx,coords$my,pch=20,cex=1,xlim=c(1,512),ylim=c(512,1),cex=dot_size(zommlevel),col=rgb(0,0,0,dot_opac(zoomlevel)/255), axes=FALSE,xaxs="i",yaxs="i",bty="n")#
  dev.off()#
}
zoomlevels = c(2:10)
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
draw.tile =function(quadkey){#
  A = 1000	#
  width = 512#
  zoomlevel=nchar(quadkey)#
  google_tile = quadkeytoTiles(quadkey)#
  tms_tile = googleTiles(google_tile,zoomlevel)#
  bounds = tilebounds(tms_tile[1],tms_tile[2],zoomlevel,origin.shift)#
#
  tile_ll = bounds[1] / A#
  tile_bb = bounds[2] / A#
  tile_rr = bounds[3] / A#
  tile_tt = bounds[4] / A#
#
  xscale = width/(tile_rr - tile_ll)#
  yscale = width/(tile_tt - tile_bb)#
  scale = min(c(xscale,yscale))#
#
  #quad.coord$quadshort = substring(quad.coord$quadkey,1,zoomlevel)#
  coords = quad.coord[quad.coord$quadzoom == quadkey,]#
#
  coords$mx = (coords$meters.mx/A - tile_ll) * scale#
  coords$my = (coords$meters.my/A - tile_tt) * -scale#
  dir.create(paste(zoomlevel,"/",sep=""),showWarnings=FALSE)#
  dir.create(paste(zoomlevel,"/",tms_tile[1],"/",sep=""),showWarnings=FALSE)#
  CairoPNG(file = paste(zoomlevel,"/",tms_tile[1],"/",tms_tile[2],".png",sep=""), width=512, height=512, bg = "transparent")#
  #plot to the corners#
  par(mar=c(0,0,0,0))#
  plot(coords$mx,coords$my,pch=20,xlim=c(1,512),ylim=c(512,1),cex=dot_size(zommlevel),col=rgb(0,0,0,dot_opac(zoomlevel)/255), axes=FALSE,xaxs="i",yaxs="i",bty="n")#
  dev.off()#
}
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
dot_size <- function(zoom) {#
  switch(as.character(zoom),#
         "4"=0.1,"5"=0.1,"6"=0.1,"7" = 0.1,"8"=0.1,"9"=0.2,"10"=0.2,"11"=0.2,"12"=0.2,"13"=0.2,"14"=0.2)#
}#
#
dot_opac <- function(zoom) {#
  switch(as.character(zoom),#
         "4"=153,"5"=153,"6"=179,"7" = 179,"8"=204,"9"=204,"10"=230,"11"=230,"12"=255,"13"=255,"14"=255)#
}
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
draw.tile =function(quadkey){#
  A = 1000	#
  width = 512#
  zoomlevel=nchar(quadkey)#
  google_tile = quadkeytoTiles(quadkey)#
  tms_tile = googleTiles(google_tile,zoomlevel)#
  bounds = tilebounds(tms_tile[1],tms_tile[2],zoomlevel,origin.shift)#
#
  tile_ll = bounds[1] / A#
  tile_bb = bounds[2] / A#
  tile_rr = bounds[3] / A#
  tile_tt = bounds[4] / A#
#
  xscale = width/(tile_rr - tile_ll)#
  yscale = width/(tile_tt - tile_bb)#
  scale = min(c(xscale,yscale))#
#
  #quad.coord$quadshort = substring(quad.coord$quadkey,1,zoomlevel)#
  coords = quad.coord[quad.coord$quadzoom == quadkey,]#
#
  coords$mx = (coords$meters.mx/A - tile_ll) * scale#
  coords$my = (coords$meters.my/A - tile_tt) * -scale#
  dir.create(paste(zoomlevel,"/",sep=""),showWarnings=FALSE)#
  dir.create(paste(zoomlevel,"/",tms_tile[1],"/",sep=""),showWarnings=FALSE)#
  CairoPNG(file = paste(zoomlevel,"/",tms_tile[1],"/",tms_tile[2],".png",sep=""), width=512, height=512, bg = "transparent")#
  #plot to the corners#
  par(mar=c(0,0,0,0))#
  plot(coords$mx,coords$my,pch=20,xlim=c(1,512),ylim=c(512,1),cex=dot_size(zoomlevel),col=rgb(0,0,0,dot_opac(zoomlevel)/255), axes=FALSE,xaxs="i",yaxs="i",bty="n")#
  dev.off()#
}
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	mclapply(quadlevel,draw.tile)#
}
