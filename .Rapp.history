begin = Sys.time()#
## Source global map tiles functions, includes library load statements#
source("globalmaptiles.R")#
#
## Set the maximum zoom level#
zoom = 14;#
#
## Read shape, output data with coordinates and quadkey reference#
# Convert coordinates to quadkey#
shape= readShapeSpatial("vermont/tabblock2010_50_pophu.shp")#
# Take a sample for quick testing#
# shape= shape[1:100,];#
#
## Obtain Coordinates#
coords= totalcoordstate(shape);#
#
## Convert to Tiles#
meters= coordstoMeters(coords, origin.shift);#
pixels= meterstoPixels(meters, zoom, origin.shift);#
tiles= pixelstoTiles(pixels, tile.size);#
#
## Convert to Microsoft Quadkey#
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)#
#
## Combine meter coordinates with quadkey values#
quad.coord= data.frame(quadkey, meters$mx, meters$my)#
#
## Print time for processing shape file(s)#
end_shape = Sys.time()#
shape_time = end_shape - begin#
print("End shape file processing")#
print(shape_time)#
#
## Draw tiles#
zoomlevels = c(2:14)#
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	lapply(quadlevel,draw.tile)#
}#
#
## Print tile creation time#
end_tiles = Sys.time()#
tile_time = end_tiles - end_shape#
print("End tile creation")#
print(tile_time)
library("maptools")#
library("sp")#
library("rgeos")#
library("rgdal")#
library("parallel")#
begin = Sys.time()#
## Source global map tiles functions, includes library load statements#
source("globalmaptiles.R")#
#
## Set the maximum zoom level#
zoom = 14;#
#
## Read shape, output data with coordinates and quadkey reference#
# Convert coordinates to quadkey#
shape= readShapeSpatial("vermont/tabblock2010_50_pophu.shp")#
# Take a sample for quick testing#
# shape= shape[1:100,];#
#
## Obtain Coordinates#
coords= totalcoordstate(shape);#
#
## Convert to Tiles#
meters= coordstoMeters(coords, origin.shift);#
pixels= meterstoPixels(meters, zoom, origin.shift);#
tiles= pixelstoTiles(pixels, tile.size);#
#
## Convert to Microsoft Quadkey#
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)#
#
## Combine meter coordinates with quadkey values#
quad.coord= data.frame(quadkey, meters$mx, meters$my)#
#
## Print time for processing shape file(s)#
end_shape = Sys.time()#
shape_time = end_shape - begin#
print("End shape file processing")#
print(shape_time)#
#
## Draw tiles#
zoomlevels = c(2:14)#
for (i in zoomlevels){#
  	quad.coord$quadzoom = substring(quad.coord$quadkey,1,i)#
  	quadlevel = unique(quad.coord$quadzoom)#
  	print(i)#
  	lapply(quadlevel,draw.tile)#
}#
#
## Print tile creation time#
end_tiles = Sys.time()#
tile_time = end_tiles - end_shape#
print("End tile creation")#
print(tile_time)
library("maptools")#
library("sp")#
library("rgeos")#
library("rgdal")#
library("parallel")#
library("Cairo")#
#
begin = Sys.time()#
## Source global map tiles functions, includes library load statements#
source("globalmaptiles.R")#
#
## Set the maximum zoom level#
zoom = 14;#
#
## Read shape, output data with coordinates and quadkey reference#
# Convert coordinates to quadkey#
shape= readShapeSpatial("vermont/tabblock2010_50_pophu.shp")#
# Take a sample for quick testing#
# shape= shape[1:100,];#
#
## Obtain Coordinates#
coords= totalcoordstate(shape);#
#
## Convert to Tiles#
meters= coordstoMeters(coords, origin.shift);#
pixels= meterstoPixels(meters, zoom, origin.shift);#
tiles= pixelstoTiles(pixels, tile.size);
head(tiles)
quadkey= apply(tiles, 1, tilestoQuadkey, zoom= zoom)
head(quadkey)
tile_test[0:10,]
tile_test=tiles[0:10,]
tilestoQuadkey(tile_test,zoom)
quadkey= apply(tiles_test, 1, tilestoQuadkey, zoom= zoom)
quadkey= apply(tile_test, 1, tilestoQuadkey, zoom= zoom)
head(quadkey)
tiles_test[1]
tile_test[1]
?apply
